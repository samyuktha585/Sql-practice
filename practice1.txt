----> Write a query in SQL to find the name of all reviewers who have rated their ratings with a NULL value.
 
     SELECT rev_name from reviewers INNER JOIN rating USING(rev_id) WHERE rev_stars IS NULL;
     
----> Write a query in SQL to list the first and last names of all the actors who were cast in the movie 'Annie Hall', and the roles they played in that production

    SELECT act_fname,act_lname,role  FROM actor  
       JOIN movie_cast ON actor.act_id=movie_cast.act_id
         JOIN movie ON movie_cast.mov_id=movie.mov_id
            AND movie.mov_title='Annie Hall';
            
----> Write a query in SQL to find the name of movie and director (first and last names) who directed a movie that casted a role for 'Eyes Wide Shut'    
  
     SELECT dir_fname, dir_lname, mov_title FROM  director 
         NATURAL JOIN movie_direction
            NATURAL JOIN movie
               NATURAL JOIN movie_cast
                  WHERE role IS  NOT NULL
                    AND mov_title='Eyes Wide Shut';


----> Write a query in SQL to find the name of movie and director (first and last names) who directed a movie that casted a role as Sean Maguire

    SELECT dir_fname, dir_lname, mov_title FROM  director 
       JOIN movie_direction ON director.dir_id=movie_direction.dir_id
           JOIN movie  ON movie_direction.mov_id=movie.mov_id
              JOIN movie_cast ON movie_cast.mov_id=movie.mov_id
                 WHERE role='Sean Maguire';


----> Write a query in SQL to list all the actors who have not acted in any movie between 1990 and 2000

    SELECT act_fname, act_lname, mov_title, mov_year FROM actor
       JOIN movie_cast  ON actor.act_id=movie_cast.act_id
         JOIN movie ON movie_cast.mov_id=movie.mov_id
            WHERE mov_year NOT BETWEEN 1990 and 2000;
            
----> Write a query in SQL to list first and last name of all the directors with number of genres movies the directed with genres name, and arranged the result alphabetically         with the first and last name of the director 

     SELECT dir_fname,dir_lname, gen_title,count(gen_title) FROM director
       JOIN movie_direction
         JOIN movie_genres
           JOIN genres
             GROUP BY dir_fname, dir_lname,gen_title
                ORDER BY dir_fname,dir_lname;
               
----> Write a query in SQL to list all the movies with year and genres.

     SELECT mov_title, mov_year, gen_title FROM movie
       NATURAL JOIN movie_genres
         NATURAL JOIN genres;
         
----> Write a query in SQL to list all the movies with year, genres, and name of the director.
 
     SELECT mov_title, mov_year, gen_title, dir_fname, dir_lname FROM movie
        NATURAL JOIN movie_genres
           NATURAL JOIN genres
             NATURAL JOIN movie_direction
               NATURAL JOIN director;

     
---->  Write a query in SQL to list all the movies with title, year, date of release, movie duration, and first and last name of the director which released before 1st january          1989, and sort the result set according to release date from highest date to lowest.

      SELECT movie.mov_title, mov_year, mov_dt_rel,
        mov_time,dir_fname, dir_lname FROM movie
          JOIN  movie_direction  ON movie.mov_id = movie_direction.mov_id
            JOIN director ON movie_direction.dir_id=director.dir_id
              WHERE mov_dt_rel <'01/01/1989' ORDER BY mov_dt_rel desc;
              
---->  Write a query in SQL to compute a report which contain the genres of those movies with their average time and number of movies for each genres.

     SELECT gen_title, AVG(mov_time), COUNT(gen_title)  FROM movie
       NATURAL JOIN  movie_genres
        NATURAL JOIN  genres GROUP BY gen_title;
        
        
---->  Write a query in SQL to find those lowest duration movies along with the year, director's name, actor's name and his/her role in that production.

    SELECT gen_title, AVG(mov_time), COUNT(gen_title) FROM movie
      NATURAL JOIN  movie_genres
        NATURAL JOIN  genres GROUP BY gen_title;
        
        
---->  Write a query in SQL to find all the years which produced a movie that received a rating of 3 or 4, and sort the result in increasing order.

      SELECT DISTINCT mov_year FROM movie, rating
         WHERE movie.mov_id = rating.mov_id AND rev_stars IN (3, 4) ORDER BY mov_year;
         
         
---->  Write a query in SQL to return the reviewer name, movie title, and stars in an order that reviewer name will come first, then by movie title, and lastly by number of            stars. 

     SELECT rev_name, mov_title, rev_stars FROM movie
       INNER JOIN rating ON movie.mov_id = rating.mov_id
         INNER JOIN reviewer ON reviewer.rev_id = rating.rev_id
           WHERE rev_name IS NOT NULL
             ORDER BY rev_name, mov_title, rev_stars;
             
             
----> Write a query in SQL to find movie title and number of stars for each movie that has at least one rating and find the highest number of stars that movie received and sort      the result by movie title.

     SELECT mov_title, MAX(rev_stars) FROM movie
        INNER JOIN rating USING(mov_id)
          GROUP BY mov_title 
            HAVING MAX(rev_stars)>0
              ORDER BY mov_title;
              
----> Write a query in SQL to find the director's first and last name together with the title of the movie(s) they directed and received the rating

    SELECT mov_title, dir_fname,dir_lname, rev_stars FROM Movie
      JOIN movie_direction USING(mov_id)
        JOIN director using (dir_id)
          LEFT JOIN rating using(mov_id)
             WHERE rev_stars is not null;
----> Write a query in SQL to find the movie title, actor first and last name, and the role for those movies where one or more actors acted in two or more movies

    SELECT mov_title, act_fname, act_lname, role FROM movie 
      JOIN movie_cast ON movie_cast.mov_id=movie.mov_id 
        JOIN actor ON movie_cast.act_id=actor.act_id
           WHERE actor.act_id IN (SELECT act_id  FROM movie_cast  GROUP BY act_id HAVING COUNT(*)>=2);
          
----> Write a query in SQL to find the first and last name of a director and the movie he or she directed, and the actress appeared which first name was Claire and last name was        Danes along with her role in that movie.

     SELECT dir_fname, dir_lname, mov_title, act_fname, act_lname, role FROM actor
       JOIN movie_cast ON actor.act_id=movie_cast.act_id
         JOIN movie_direction ON movie_cast.mov_id=movie_direction.mov_id
           JOIN director ON movie_direction.dir_id=director.dir_id
             JOIN movie ON movie.mov_id=movie_direction.mov_id
                WHERE act_fname='Claire' AND act_lname='Danes';
                
----> Write a query in SQL to find the first and last name of an actor with their role in the movie which was also directed by themselve.
 
    SELECT act_fname, act_lname, mov_title, role FROM actor
      JOIN movie_cast ON actor.act_id=movie_cast.act_id
        JOIN movie_direction  ON movie_cast.mov_id=movie_direction.mov_id
          JOIN director  ON movie_direction.dir_id=director.dir_id
             JOIN movie ON movie.mov_id=movie_direction.mov_id
               WHERE act_fname=dir_fname AND act_lname=dir_lname;
     
----> Write a query in SQL to find the cast list for the movie Chinatown.


     SELECT a.act_fname, a.act_lname FROM movie_cast c JOIN actor a ON c.act_id = a.act_id Where mov_id = ( SELECT mov_id FROM movie Where mov_title = 'Chinatown');
     
---->  Write a query in SQL to find the movie in which the actor appeared whose first and last name are 'Harrison' and 'Ford'.

    SELECT m.mov_title FROM  movie m
      JOIN movie_cast c  ON  m.mov_id = c.mov_id
       WHERE c.act_id IN (Select act_id FROM actor  WHERE act_fname='Harrison' AND act_lname='Ford');
      
----> Write a query in SQL to find the highest-rated movie, and report its title, year, rating, and releasing country

    SELECT mov_title, mov_year, rev_stars, mov_rel_country FROM movie 
     NATURAL JOIN rating WHERE rev_stars = (SELECT MAX(rev_stars) FROM rating);
     
----> Write a query in SQL to generate a report which shows the year when most of the Mystery movies produces, and number of movies and their average rating.

    SELECT mov_year,gen_title,count(gen_title), avg(rev_stars) FROM movie 
      NATURAL JOIN movie_genres 
        NATURAL JOIN genres
          NATURAL JOIN rating
            WHERE gen_title='Mystery' 
              GROUP BY mov_year,gen_title;
              
              
----> Write a query in SQL to generate a report which contain the columns movie title, name of the female actor, year of the movie, role, movie genres, the director, date of             release, and rating of that movie.

       SELECT mov_title, act_fname, act_lname, mov_year, role, gen_title, dir_fname, dir_lname, mov_dt_rel, rev_stars FROM movie 
         NATURAL JOIN movie_cast
            NATURAL JOIN actor
               NATURAL JOIN movie_genres
                  NATURAL JOIN genres
                     NATURAL JOIN movie_direction
                         NATURAL JOIN director
                            NATURAL JOIN rating
                                  WHERE act_gender='F';


